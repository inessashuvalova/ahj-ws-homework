!function(){"use strict";function t(t){const e=document.createElement("li");return e.classList.add("unit"),e.innerHTML=`${t.name}<br>${t.time}<br>${t.message}`,e}function e(t){const e=document.createElement("li");return e.classList.add("unit"),e.dataset.userId=`${t.id}`,e.innerHTML=`<img class="userpic">&nbsp<span class="username">${t.name}</span>`,e}(new class{constructor(){this.user=void 0,this.webSocket=new WebSocket("ws://localhost:9000/ws")}async init(){this.render(),this.bindToDOM(),this.signupListen()}render(){document.body.append(function(){const t=document.createElement("main");return t.classList.add("wrapper"),t.innerHTML='\n  <div class="widget-container">\n  <h2 class="chat-header">Chat</h2>\n  <div class="chat-container">\n    <div class="list-wrapper">\n      <ul id="usersContainer" class="list-container users-container"></ul>\n    </div>\n    <div class="list-wrapper">\n      <ul id="msgContainer" class="msg-container list-container"></ul>\n    </div>\n  </div>\n  <form id="loginForm" class="form__input-button-holder ">\n    <input\n      id="loginInput"\n      class="form__input"\n      type="text"\n      placeholder="Введите псевдоним.."\n      name="name"\n      required\n    />\n    <button id="loginSend" type="button" class="btn btn-submit">Войти</button>\n  </form>\n  <form id="msgForm" class="form__input-button-holder visually-hidden">\n    <input\n      id="msgInput"\n      class="form__input"\n      type="text"\n      placeholder="Введите сообщение.."\n      name="msg"\n      required\n    />\n    <button id="msgSend" type="button" class="btn btn-submit">Отправить</button>\n  </form>\n</div>\n  ',t}())}bindToDOM(){this.chat=document.querySelector("ul.msg-container"),this.usersContainer=document.querySelector("ul.users-container"),this.loginForm=document.querySelector("#loginForm"),this.loginInput=document.querySelector("#loginInput"),this.loginSend=document.querySelector("#loginSend"),this.sendMsgForm=document.querySelector("#msgForm"),this.msgInput=document.querySelector("#msgInput"),this.btnMsgSend=document.querySelector("#msgSend")}signupListen(){this.loginInput.focus(),this.webSocket.addEventListener("message",(t=>{t.preventDefault(),this.socketMsgHandler(t)}),!1),this.loginSend.addEventListener("click",(t=>{t.preventDefault(),this.signup()}),!1),this.loginForm.addEventListener("submit",(t=>{t.preventDefault(),this.signup()}),!1)}async signup(){const t=this.loginInput.value;await this.webSocket.send(JSON.stringify({type:"login",login:t,time:new Date}))}socketMsgHandler(e){const n=JSON.parse(e.data),{type:s,usersList:i,error:r,state:o}=n;if("loginTrue"===o&&(this.loginForm.classList.add("visually-hidden"),this.sendMsgForm.classList.remove("visually-hidden"),this.user=n.user,this.chatInit()),r){const e=t(n);return e.classList.add("error"),this.chat.append(e),void this.chat.lastElementChild.scrollIntoView()}if("msg"===s&&this.user){let e;n.name===this.user.name?(n.name="You",e=t(n),e.classList.add("myself")):e=t(n),this.chat.append(e),this.chat.lastElementChild.scrollIntoView()}i&&(this.users=JSON.parse(i),this.renderUsers())}renderUsers(){this.usersContainer.innerHTML="";for(let t of this.users)this.usersContainer.append(e(t))}async chatInit(){this.msgInput.focus(),this.btnMsgSend.addEventListener("click",(t=>{t.preventDefault(),this.sendMsg()}),!1),this.sendMsgForm.addEventListener("submit",(t=>{t.preventDefault(),this.sendMsg()}),!1)}async sendMsg(){const t=this.msgInput.value;await this.webSocket.send(JSON.stringify({type:"msg",message:t,userId:this.user.id,time:new Date})),this.msgInput.value=""}}).init()}();
//# sourceMappingURL=app.js.map